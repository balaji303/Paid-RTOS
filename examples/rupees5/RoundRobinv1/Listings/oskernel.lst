


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    2 00000000                 THUMB
    3 00000000                 EXTERN           currentPt
    4 00000000                 EXPORT           SysTick_Handler
    5 00000000                 EXPORT           OsSchedulerLaunch
    6 00000000         
    7 00000000         SysTick_Handler                      ;Saves r0,r1,r2,r3,
                                                            r12,link register,P
                                                            rogram Counter, PSR
                                                            
    8 00000000 B672            CPSID            I           ;Disable Interrupt
    9 00000002 E92D 0FF0       PUSH             {R4-R11}    ;Push Register r4 t
                                                            o r11 into Stack
   10 00000006 480E            LDR              R0,=currentPt ;We Load the curr
                                                            entPt to R0
   11 00000008 6801            LDR              R1,[R0]     ;Load R0 into R1. C
                                                            urrentPt point to c
                                                            urrent running Thre
                                                            ad
   12 0000000A F8C1 D000       STR              SP,[R1]     ;Stack Pointer is e
                                                            qual to CurrentPt
   13 0000000E 6849            LDR              R1,[R1,#4]  ;Number  4 takes us
                                                             to the second entr
                                                            y in thread control
                                                             block 
   14 00000010 6001            STR              R1,[R0]     ;currentPt= r1
   15 00000012 F8D1 D000       LDR              SP,[R1]     ;Stack Pointer Poin
                                                            ts to the Top of th
                                                            e new Stack
   16 00000016 E8BD 0FF0       POP              {R4-R11}    ;Restore the  regis
                                                            ters that we pushed
                                                            
   17 0000001A B662            CPSIE            I           ;Enable Interrupt
   18 0000001C 4770            BX               LR          ;All registers r0,r
                                                            1,r2,r3,r12,LR,PC,x
                                                            PSR register are re
                                                            stored by the proce
                                                            ssor
   19 0000001E         
   20 0000001E         
   21 0000001E         
   22 0000001E         
   23 0000001E         
   24 0000001E         ;**************
   25 0000001E         ;LDR        R0,=currentPt  ;R1 = currentPtr->StackPtr
   26 0000001E         ;STR SP,[R1]       ;SP store to  currentPtr->StackPtr
   27 0000001E         ;LDR R1,[R1,#4]    ;R1=currentPtr->nextPtr
   28 0000001E         ;STR R1,[R0]       ;currentPtr->nextPtr store to current
                       Ptr
   29 0000001E         ;LDR SP,[R1]       ;currentPtr->StackPtr store to SP
   30 0000001E         ;POP {R4 - R11}      ;currentPtr->StackPtr storerage to 
                       R4-R11
   31 0000001E         ;**************
   32 0000001E         ; On Each SysTick_Handler save the current thread and lo
                       ad the next thread:
   33 0000001E         ; --------------------------------------
   34 0000001E         ; 1. save stack to thread (currentPtr->stackPtr)
   35 0000001E         ; 2. switch to the new thread (currentPtr = currentPtr->



ARM Macro Assembler    Page 2 


                       nextPtr)
   36 0000001E         ; 3. load stack from next thread for switch (SP = curren
                       tPtr->stackPtr)
   37 0000001E         
   38 0000001E         ;SysTick_Handler               ; Automatically Saves r0,
                        r1, r2, r3, r12, lr, pc, psr to stack
   39 0000001E         
   40 0000001E         ;    CPSID    I         ; disable interrupts
   41 0000001E         ;    PUSH    {R4-R11}        ; save r4, r5, r6, r7, r8, 
                       r9, r10, r11 to stack
   42 0000001E         
   43 0000001E         ;     C-Equivalent
   44 0000001E         ;     --------------
   45 0000001E         ;    LDR    R0, =currentPtr   ; Assign r0 to point to cu
                       rrentPtr        ::     R0 = &currentPtr
   46 0000001E         ;    LDR    R1, [R0]          ; Load the value of R1 wit
                       h R0.          ::     R1 = currentPtr
   47 0000001E         ;    STR    SP, [R1]          ; Stores stack pointer int
                       o R1.         ::     currentPtr->StackPtr = SP
   48 0000001E         ;    LDR    R1, [R1, 4]       ; Load R1 with the value o
                       f R1+4         ::     R1 = currentPtr->nextPtr
   49 0000001E         ;    STR    R1, [R0]       ; store R1 in R0. points to n
                       ext thread   ::     currentPtr = R1 = currentPtr->nextPt
                       r
   50 0000001E         ;    LDR    SP, [R1]       ; loads SP with R1.    ::    
                        SP = currentPtr->stackPtr
   51 0000001E         
   52 0000001E         ;    POP    {R4-R11}       ; restore r4, r5, r6, r7, r8,
                        r9, r10, r11 from new stack
   53 0000001E         
   54 0000001E         ;    CPSIE  I        ; enable interrupts
   55 0000001E         
   56 0000001E         ;    BX    LR        ; return from subroutine. Automatic
                       ally restores r0, r1, r2, r3, r12, lr, pc, psr from new 
                       stack
   57 0000001E         
   58 0000001E         
   59 0000001E         
   60 0000001E         OsSchedulerLaunch                    ;SP to the value of
                                                             1st thread
   61 0000001E B672            CPSID            I           ;Disable Interrupt
   62 00000020 4807            LDR              R0,=currentPt
   63 00000022 6802            LDR              R2,[R0]     ;R2=currentPt
   64 00000024 F8D2 D000       LDR              SP,[R2]     ;SP=currentPt->Stac
                                                            kPt
   65 00000028 E8BD 0FF0       POP              {R4-R11}
   66 0000002C BC0F            POP              {R0-R3}
   67 0000002E F85D CB04       POP              {R12}
   68 00000032 B001            ADD              SP,SP,#4    ;Get rid of LR regi
                                                            ster
   69 00000034 F85D EB04       POP              {LR}
   70 00000038 B001            ADD              SP,SP,#4    ;Get rid of PSR reg
                                                            ister
   71 0000003A B662            CPSIE            I
   72 0000003C 4770            BX               LR
   73 0000003E         
   74 0000003E         
   75 0000003E 00 00           ALIGN
   76 00000040                 END



ARM Macro Assembler    Page 3 


              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\objects\oskernel.d -o.\objects\oskernel.o -I.\RTE\_Target_1 -IC:
\Users\Balaji\AppData\Local\Arm\Packs\ARM\CMSIS\5.6.0\CMSIS\Core\Include -IC:\U
sers\Balaji\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Dev
ice\ST\STM32F4xx\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VER
SION SETA 528" --predefine="_RTE_ SETA 1" --predefine="STM32F446xx SETA 1" --li
st=.\listings\oskernel.lst OSKernel.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 1 in file OSKernel.s
   Uses
      None
Comment: .text unused
OsSchedulerLaunch 0000001E

Symbol: OsSchedulerLaunch
   Definitions
      At line 60 in file OSKernel.s
   Uses
      At line 5 in file OSKernel.s
Comment: OsSchedulerLaunch used once
SysTick_Handler 00000000

Symbol: SysTick_Handler
   Definitions
      At line 7 in file OSKernel.s
   Uses
      At line 4 in file OSKernel.s
Comment: SysTick_Handler used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

currentPt 00000000

Symbol: currentPt
   Definitions
      At line 3 in file OSKernel.s
   Uses
      At line 10 in file OSKernel.s
      At line 62 in file OSKernel.s

1 symbol
340 symbols in table
